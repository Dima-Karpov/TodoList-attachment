{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","state/task-reducer.ts","state/TodoList-reducer.ts","components/features/Login/login-api.ts","components/features/Login/auth-reducer.ts","state/app-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","components/AddItemForm/AddItemFrom.tsx","components/EditableSpan/EditableSpan.tsx","components/features/Todolist/Task/Task.tsx","components/features/Todolist/TodoList.tsx","components/features/Todolist/TodolistsList.tsx","components/features/Login/Login.tsx","app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todoListId","delete","put","taskId","model","hendleServerAppError","dispatch","data","messages","length","setError","setStatus","handleServerNetworkError","message","initialState","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","description","status","priority","startDate","deadline","then","res","resultCode","type","updateTaskAC","catch","error","console","warn","remove_todoList","add_todoList","change_todoList_title","change_todoList_filter","set_todoList","change_todolist_entity_status","fetchTodoListsTC","todoLists","todolist","forEach","tl","items","setTasksAC","removeTodolistsTC","entityStatus","changeTodolistEntityStatusAC","removeTodoListAC","addTodolistsTC","todoList","item","changeTodoListTitleTC","changeTodoListTitleAC","authAPI","isLoggedIn","setIsLoggedInAC","value","isInitialized","setInitialized","Alert","React","memo","props","elevation","variant","ErrorSnacbar","useDispatch","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AddItemFrom","addItem","useState","newTaskTitle","setNewTaskTitle","onClickAddTask","trim","TextField","label","onChange","e","currentTarget","onKeyPress","key","helperText","onBlur","disabled","IconButton","onClick","color","fontSize","EditableSpan","changeTitle","editMode","setEditMode","autoFocus","onDoubleClick","Task","onChangeHandler","useCallback","newIsDoneValue","checked","changeTaskStatus","todoListID","Completed","New","removeTask","removeTasks","onChangeTaskTitle","newTitle","changeTaskTitle","className","Checkbox","size","TodoList","filter","getTasksForTodoList","map","onClickAllFilter","changeFilter","onClickActiveFilter","onClickCompletedFilter","removeTodoList","addTask","changeTodoListTitle","style","listStyle","paddingLeft","Button","marginLeft","TodolistsList","auth","useEffect","changeTaskEntityStatusAC","removeTasksAC","addTaskTC","changeStatus","action","addTodoList","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","justify","xs","FormControl","FormLabel","rel","href","target","handleSubmit","FormGroup","margin","getFieldProps","handleBlur","touched","FormControlLabel","control","AppWithRedux","finally","AppBar","position","Toolbar","justifyContent","edge","aria-label","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReduser","combineReducers","copyTasks","copyState","stateCopy","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCHMC,EAMAC,E,6JANAD,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KAmCL,IAAMC,EAAWC,IAAMC,OAAO,CACjCC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAc,WAEnB,OAAON,EAASO,IAAyB,eAFpCD,EAAc,SAIZE,GACP,OAAOR,EAASS,KAA+C,aAAc,CAAED,WAL1EF,EAAc,SAOZI,GACP,OAAOV,EAASW,OAAT,qBAAkDD,KARpDJ,EAAc,SAURI,EAAoBF,GAC/B,OAAOR,EAASY,IAAT,qBAA+CF,GAAc,CAAEF,WAXjEF,EAAc,SAadI,GACL,OAAOV,EAASO,IAAT,qBAA6CG,EAA7C,YAdFJ,EAAc,SAgBbO,EAAgBH,GACtB,OAAOV,EAASW,OAAT,qBAAkDD,EAAlD,kBAAsEG,KAjBxEP,EAAc,SAmBZI,EAAoBF,GAC3B,OAAOR,EAASS,KAAT,qBAAoEC,EAApE,UAAwF,CAAEF,WApB5FF,EAAc,SAsBXI,EAAoBG,EAAgBC,GAC5C,OAAOd,EAASY,IAAT,qBAAyDF,EAAzD,kBAA6EG,GAAUC,ICnFzFC,EAAuB,SAAIC,EAAkCC,GAClEA,EAAKC,SAASC,OACdH,EAASI,GAASH,EAAKC,SAAS,KAEhCF,EAASI,GAAS,UAEtBJ,EAASK,GAAU,YAGVC,EAA2B,SAACN,EAAkCO,GACvEP,EAASI,GAASG,IAClBP,EAASK,GAAU,Y,QCajBG,EAA8B,GA8HvBC,EAAe,SAACf,EAAoBG,EAAgBa,GAArC,OACxB,SAACV,EAAoBW,GACjB,IAEMC,EAFQD,IAEKE,MAAMnB,GAAYoB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOnB,KACxD,GAAKe,EAAL,CAKA,IAAMK,EAA6B,aAC/BzB,MAAOoB,EAAKpB,MACZ0B,YAAaN,EAAKM,YAClBC,OAAQP,EAAKO,OACbC,SAAUR,EAAKQ,SACfC,UAAWT,EAAKS,UAChBC,SAAUV,EAAKU,UACZZ,GAEPV,EAASK,GAAU,YACnBf,EAAuBI,EAAYG,EAAQoB,GACtCM,MAAK,SAACC,GACyB,IAAxBA,EAAIvB,KAAKwB,YACTzB,EAnFQ,SAACN,EAAoBsB,EAAYlB,GAAjC,MACvB,CAAE4B,KAAM,cAAehC,aAAYsB,KAAIlB,SAkFf6B,CAAajC,EAAYG,EAAQa,IAC1CV,EAASK,GAAU,eAEnBN,EAAqBC,EAAUwB,EAAIvB,SAG1C2B,OAAM,SAACC,GACJvB,EAAyBN,EAAU6B,EAAMtB,iBAxB7CuB,QAAQC,KAAK,iCCzJZC,EAAkB,kBAClBC,EAAe,eACfC,EAAwB,wBACxBC,EAAyB,yBACzBC,EAAe,cACfC,EAAgC,yCA8CvC7B,EAA0C,GA6CnC8B,EAAmB,kBAAM,SAACtC,GACnCA,EAASK,GAAU,YACnBf,IACKiC,MAAK,SAACC,GAVc,IAACe,EAalB,OAFAvC,GAXkBuC,EAWKf,EAAIvB,KAV5B,CAAEyB,KAAMU,EAAcG,eAWrBvC,EAASK,GAAU,cACZmB,EAAIvB,QAEdsB,MAAK,SAAAiB,GACFA,EAASC,SAAQ,SAAAC,GDND,IAAChD,ECObM,GDPaN,ECOSgD,EAAG1B,GDPW,SAAChB,GACjDA,EAASK,GAAU,YACnBf,EAAqBI,GAChB6B,MAAK,SAACC,GACH,IAAMX,EAAQW,EAAIvB,KAAK0C,MACvB3C,EAbc,SAACa,EAAwBnB,GAAzB,MACrB,CAAEgC,KAAM,YAAab,QAAOnB,cAYZkD,CAAW/B,EAAOnB,IAC3BM,EAASK,GAAU,iBAEtBuB,OAAM,SAACC,GACJvB,EAAyBN,EAAU6B,EAAMtB,qBCC5CqB,OAAM,SAACC,GACJvB,EAAyBN,EAAU6B,EAAMtB,cAGxCsC,EAAoB,SAACnD,GAAD,OAAwB,SAACM,GACtDA,EAASK,GAAU,YACnBL,EAvBwC,SAACN,EAAoBoD,GAArB,MACvC,CAAEpB,KAAMW,EAA+B3C,aAAYoD,gBAsB3CC,CAA6BrD,EAAY,YAClDJ,EAAuBI,GAClB6B,MAAK,SAACC,GACHxB,EAzCoB,SAACN,GAC7B,MAAO,CAAEgC,KAAMM,EAAiBtC,cAwCfsD,CAAiBtD,IAC1BM,EAASK,GAAU,iBAEtBuB,OAAM,SAACC,GACJvB,EAAyBN,EAAU6B,EAAMtB,cAGxC0C,EAAiB,SAACzD,GAAD,OAAmB,SAACQ,GAC9CA,EAASK,GAAU,YACnBf,EAAuBE,GAClB+B,MAAK,SAACC,GAhDc,IAAC0B,EAiDU,IAAxB1B,EAAIvB,KAAKwB,YACTzB,GAlDckD,EAkDS1B,EAAIvB,KAAKA,KAAKkD,KAjD1C,CAAEzB,KAAMO,EAAciB,cAkDjBlD,EAASK,GAAU,eAEnBN,EAAqBC,EAAUwB,EAAIvB,SAG1C2B,OAAM,SAACC,GACJvB,EAAyBN,EAAU6B,EAAMtB,cAGxC6C,EAAwB,SAAC1D,EAAoBF,GAArB,OAAuC,SAACQ,GACzEA,EAASK,GAAU,YACnBf,EAA2BI,EAAYF,GAClC+B,MAAK,SAACC,GACyB,IAAxBA,EAAIvB,KAAKwB,YACTzB,EA9DqB,SAACN,EAAoBF,GACtD,MAAO,CAAEkC,KAAMQ,EAAuBxC,aAAYF,SA6D7B6D,CAAsB3D,EAAYF,IAC3CQ,EAASK,GAAU,eAEnBN,EAAqBC,EAAUwB,EAAIvB,SAG1C2B,OAAM,SAACC,GACJvB,EAAyBN,EAAU6B,EAAMtB,cChJxC+C,EAAU,SACbrD,GACF,OAAOjB,EAASS,KAA6C,cAAeQ,IAFvEqD,EAAU,WAKf,OAAOtE,EAASO,IAAwC,aALnD+D,EAAU,WAQf,OAAOtE,EAASW,OAA2B,gBCjB7Ca,GAAe,CACjB+C,YAAY,GAaHC,GAAkB,SAACC,GAAD,MAC1B,CAAE/B,KAAM,yBAA0B+B,UChBjCjD,GAAe,CACjBW,OAAQ,UACRU,MAAO,KACP6B,eAAe,GAqBNrD,GAAY,SAACc,GAAD,MAAgC,CAAEO,KAAM,iBAAkBP,WAGtEf,GAAW,SAACyB,GAAD,MAA2B,CAAEH,KAAM,gBAAiBG,UAG/D8B,GAAiB,SAACD,GAAD,MAA6B,CAAEhC,KAAM,sBAAuBgC,kB,QC3BpFE,GAAQC,IAAMC,MAAK,SAACC,GACtB,OAAO,eAAC,IAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,OAG3CG,GAAyBL,IAAMC,MAAK,WAE7C,IAAM9D,EAAWmE,cACXtC,EAAQuC,aAA6C,SAAAC,GAAK,OAAIA,EAAMC,IAAIzC,SAExE0C,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJzE,EAASI,GAAS,QAGtB,OACI,eAACsE,EAAA,EAAD,CACIC,KAAgB,OAAV9C,EACN+C,iBAAkB,IAClBC,QAASN,EAHb,SAKI,eAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SACKjD,S,2DCpBJkD,GAA0ClB,IAAMC,MAAK,SAACC,GAAW,IAEtEiB,EAEAjB,EAFAiB,QACAlC,EACAiB,EADAjB,aAHqE,EAMjCmC,mBAAS,IANwB,oBAMlEC,EANkE,KAMpDC,EANoD,OAO/CF,mBAAwB,MAPuB,oBAOlEpD,EAPkE,KAO3DzB,EAP2D,KAmBnEgF,EAAiB,WACS,KAAxBF,EAAaG,QACbL,EAAQE,EAAaG,QACrBF,EAAgB,KAEhB/E,EAAS,sBAIjB,OACI,iCACI,eAACkF,GAAA,EAAD,CACI7B,MAAOyB,EACPjB,QAAS,WACTsB,MAAO,aACPC,SAzBU,SAACC,GAAuCN,EAAgBM,EAAEC,cAAcjC,QA0BlFkC,WAxBe,SAACF,GACV,OAAV5D,GACAzB,EAAS,MAEC,UAAVqF,EAAEG,KACFR,KAoBIvD,QAASA,EACTgE,WAAYhE,EACZiE,OAAQ,kBAAM1F,EAAS,OACvB2F,SAA2B,YAAjBjD,IAEd,eAACkD,EAAA,EAAD,CACIC,QAASb,EACTc,MAAO,UACPH,SAA2B,YAAjBjD,EAHd,SAKI,eAAC,KAAD,CAASqD,SAAU,oB,oBC9CtBC,GAAgDvC,IAAMC,MAAK,SAACC,GAAW,IAG5EvE,EAGAuE,EAHAvE,MACA6G,EAEAtC,EAFAsC,YACAvD,EACAiB,EADAjB,aAL2E,EAQ/CmC,oBAAS,GARsC,oBAQxEqB,EARwE,KAQ9DC,EAR8D,OASvCtB,mBAAS,IAT8B,oBASxEC,EATwE,KAS1DC,EAT0D,KAqB/E,OACImB,EACI,eAAChB,GAAA,EAAD,CACI7B,MAAOyB,EACPY,OAbQ,WAChBS,GAAY,GACZF,EAAYnB,IAYJsB,WAAS,EACThB,SAVU,SAACC,GACnBN,EAAgBM,EAAEC,cAAcjC,QAUxBsC,SAA2B,YAAjBjD,IAEd,uBACI2D,cApBO,kBAAMF,GAAY,IAmB7B,SAGK/G,O,UC1BJkH,GAAgC7C,IAAMC,MAAK,SAACC,GAErD,IAAM4C,EAAkBC,uBAAY,SAACnB,GACjC,IAAIoB,EAAiBpB,EAAEC,cAAcoB,QACrC/C,EAAMgD,iBAAiBhD,EAAMiD,WAAYjD,EAAMnD,KAAKI,GAAI6F,EAAiB/H,EAAamI,UAAYnI,EAAaoI,OAChH,CAACnD,IAEEoD,EAAaP,uBAAY,kBAAM7C,EAAMqD,YAAYrD,EAAMnD,KAAKI,GAAI+C,EAAMiD,cACxE,CAACjD,IACCsD,EAAoBT,uBAAY,SAACU,GACnCvD,EAAMwD,gBACFxD,EAAMiD,WACNjD,EAAMnD,KAAKI,GACXsG,KAEL,CAACvD,IAEJ,OACI,uBAEIyD,UAAWzD,EAAMnD,KAAKO,SAAWrC,EAAamI,UAAY,UAAY,GAF1E,UAII,eAACQ,GAAA,EAAD,CACIX,QAAS/C,EAAMnD,KAAKO,SAAWrC,EAAamI,UAC5CzB,SAAUmB,IAGd,eAACP,GAAD,CACI5G,MAAOuE,EAAMnD,KAAKpB,MAClB6G,YAAagB,IAEjB,eAACrB,EAAA,EAAD,CAAYC,QAASkB,EAAYO,KAAK,QAAQ3B,SAAiC,YAAvBhC,EAAMjB,aAA9D,SACI,eAAC,KAAD,QAbCiB,EAAMnD,KAAKI,OCNf2G,GAAgC9D,IAAMC,MAAK,SAACC,GAErD,IAaMlD,EAbsB+F,uBAAY,WACpC,OAAQ7C,EAAM6D,QACV,IAAK,YACD,OAAO7D,EAAMlD,MAAM+G,QAAO,SAAA7G,GAAC,OAAIA,EAAEI,SAAWrC,EAAaoI,OAC7D,IAAK,SACD,OAAOnD,EAAMlD,MAAM+G,QAAO,SAAA7G,GAAC,OAAIA,EAAEI,SAAWrC,EAAamI,aAC7D,QACI,OAAOlD,EAAMlD,SAEtB,CAACkD,GAEW8D,GAEQC,KAAI,SAAA/G,GAAC,OAAI,eAAC2F,GAAD,CAC5B9F,KAAMG,EACNiG,WAAYjD,EAAMiD,WAClBD,iBAAkBhD,EAAMgD,iBACxBK,YAAarD,EAAMqD,YACnBG,gBAAiBxD,EAAMwD,gBAEvBzE,aAAc/B,EAAE+B,cADX/B,EAAEC,OAKL+G,EAAmBnB,uBAAY,WAAQ7C,EAAMiE,aAAajE,EAAMiD,WAAY,SAAU,CAACjD,IACvFkE,EAAsBrB,uBAAY,WAAQ7C,EAAMiE,aAAajE,EAAMiD,WAAY,YAAa,CAACjD,IAC7FmE,EAAyBtB,uBAAY,WAAQ7C,EAAMiE,aAAajE,EAAMiD,WAAY,eAAgB,CAACjD,IAEnGoE,EAAiBvB,uBAAY,WAC/B7C,EAAMoE,eAAepE,EAAMiD,cAC5B,CAACjD,IAEEqE,EAAUxB,uBAAY,SAACpH,GACzBuE,EAAMqE,QAAQrE,EAAMiD,WAAYxH,KACjC,CAACuE,IAEEsE,EAAsBzB,uBAAY,SAACU,GACrCvD,EAAMsE,oBAAoBtE,EAAMiD,WAAYM,KAC7C,CAACvD,IAEJ,OACI,iCACI,gCACI,eAACqC,GAAD,CAAc5G,MAAOuE,EAAMvE,MAAO6G,YAAagC,EAAqBvF,aAAciB,EAAMjB,eACxF,eAACkD,EAAA,EAAD,CAAYC,QAASkC,EAAgBpC,SAAiC,YAAvBhC,EAAMjB,aAArD,SACI,eAAC,KAAD,CAAYqD,SAAS,eAG7B,+BACI,eAACpB,GAAD,CAAaC,QAASoD,EAAStF,aAAciB,EAAMjB,iBAEvD,qBAAIwF,MAAO,CAAEC,UAAW,OAAQC,YAAa,OAA7C,SACK3H,IAEL,iCACI,eAAC4H,EAAA,EAAD,CACIxE,QAA0B,QAAjBF,EAAM6D,OAAmB,YAAc,OAChD1B,MAAO,UACPD,QAAS8B,EAHb,iBAKA,eAACU,EAAA,EAAD,CACIH,MAAO,CAAEI,WAAY,OACrBzE,QAA0B,WAAjBF,EAAM6D,OAAsB,YAAc,OACnD1B,MAAO,UACPD,QAASgC,EAJb,oBAMA,eAACQ,EAAA,EAAD,CACIH,MAAO,CAAEI,WAAY,OACrBzE,QAA0B,cAAjBF,EAAM6D,OAAyB,YAAc,OACtD1B,MAAO,UACPD,QAASiC,EAJb,gC,SC/EHS,GAA0B9E,IAAMC,MAAK,WAE9C,IAAMjD,EAAQuD,aAA6C,SAAAC,GAAK,OAAIA,EAAMxD,SACpE0B,EAAY6B,aAAyD,SAAAC,GAAK,OAAIA,EAAM9B,aACpFgB,EAAaa,aAAuC,SAAAC,GAAK,OAAIA,EAAMuE,KAAKrF,cACxEvD,EAAWmE,cAEjB0E,qBAAU,WAEDtF,GAGLvD,EAASsC,OACV,CAACtC,EAAUuD,IAEd,IAAM6D,EAAcR,uBAAY,SAAC5F,EAAYgG,GVmFrB,IAACnH,EAAgBH,EUlFrCM,GVkFqBH,EUlFCmB,EVkFetB,EUlFXsH,EVkFkC,SAAChH,GACjEA,EAASK,GAAU,YACnBL,EAnBoC,SAACgB,EAAYtB,EAAoBoD,GAAjC,MACnC,CAAEpB,KAAM,iCAAkCV,KAAItB,aAAYoD,aAkBL,WAA7CgG,CAAyBjJ,EAAQH,IAC1CJ,EAAsBO,EAAQH,GACzB6B,MAAK,SAACC,GACHxB,EAjCiB,SAACgB,EAAYtB,GAAb,MACxB,CAAEgC,KAAM,eAAgBV,KAAItB,cAgCZqJ,CAAclJ,EAAQH,IAC/BM,EAASK,GAAU,iBAEtBuB,OAAM,SAACC,GACJvB,EAAyBN,EAAU6B,EAAMtB,iBU1F9C,CAACP,IAEEoI,EAAUxB,uBAAY,SAACI,EAAoBxH,GAC7CQ,EV0FiB,SAACN,EAAoBF,GAArB,OAAuC,SAACQ,GAC7DA,EAASK,GAAU,YACnBf,EAAuBI,EAAYF,GAC9B+B,MAAK,SAACC,GACyB,IAAxBA,EAAIvB,KAAKwB,YACTzB,EA1CX,CAAE0B,KAAM,WAAYd,KA0CUY,EAAIvB,KAAKA,KAAKkD,OACjCnD,EAASK,GAAU,eAEnBN,EAAqBC,EAAUwB,EAAIvB,SAG1C2B,OAAM,SAACC,GACJvB,EAAyBN,EAAU6B,EAAMtB,aUtGpCyI,CAAUhC,EAAYxH,MAChC,CAACQ,IAEEiJ,EAAerC,uBAAY,SAACI,EAAoBhG,EAAYG,GAC9DnB,EAASS,EAAauG,EAAYhG,EAAI,CAAEG,cACzC,CAACnB,IAEEuH,EAAkBX,uBAAY,SAACI,EAAoBhG,EAAYsG,GACjEtH,EAASS,EAAauG,EAAYhG,EAAI,CAAExB,MAAO8H,OAChD,CAACtH,IAEEmI,EAAiBvB,uBAAY,SAACI,GAChC,IAAMkC,EAASrG,EAAkBmE,GACjChH,EAASkJ,KACV,CAAClJ,IACEgI,EAAepB,uBAAY,SAACI,EAAoBvD,GAClD,IAAMyF,ETsCH,CAAExH,KAAMS,EAAwBzC,WStCGsH,ETsCSY,OStCGnE,GAClDzD,EAASkJ,KACV,CAAClJ,IACEqI,EAAsBzB,uBAAY,SAACI,EAAoBM,GACzDtH,EAASoD,EAAsB4D,EAAYM,MAC5C,CAACtH,IACEmJ,EAAcvC,uBAAY,SAACpH,GAC7BQ,EAASiD,EAAezD,MACzB,CAACQ,IAGJ,OAAKuD,EAIE,uCACH,eAAC6F,GAAA,EAAD,CAAMC,WAAS,EAACf,MAAO,CAAEgB,QAAS,QAAlC,SACI,eAACvE,GAAD,CAAaC,QAASmE,MAE1B,eAACC,GAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQhH,EAAUuF,KAAI,SAAApF,GACV,IAAI8G,EAAmB3I,EAAM6B,EAAG1B,IAEhC,OAAO,eAACoI,GAAA,EAAD,CAAMjG,MAAI,EAAV,SACH,eAACsG,GAAA,EAAD,CAAOnB,MAAO,CAAEgB,QAAS,QAAzB,SACI,eAAC3B,GAAD,CACIX,WAAYtE,EAAG1B,GACfxB,MAAOkD,EAAGlD,MACVqB,MAAO2I,EACPpC,YAAaA,EACbY,aAAcA,EACdI,QAASA,EACTrB,iBAAkBkC,EAClBrB,OAAQlF,EAAGkF,OACXO,eAAgBA,EAChBZ,gBAAiBA,EACjBc,oBAAqBA,EACrBvF,aAAcJ,EAAGI,kBAdNJ,EAAG1B,YAZ/B,eAAC,KAAD,CAAU0I,GAAI,c,0DCtDhBC,GAAmC9F,IAAMC,MAAK,WAEvD,IAAM9D,EAAWmE,cACXZ,EAAaa,aAAuC,SAAAC,GAAK,OAAIA,EAAMuE,KAAKrF,cAExEqG,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAAAC,GRAK,IAAClK,EQCZD,GRDYC,EQCKkK,ERDqB,SAACnK,GAC/CA,EAASK,GAAU,YACnBiD,EAAcrD,GACTsB,MAAK,SAAAC,GAC0B,IAAxBA,EAAIvB,KAAKwB,YACTzB,EAASwD,IAAgB,IACzBxD,EAASK,GAAU,eAEnBN,EAAqBC,EAAUwB,EAAIvB,SAG1C2B,OAAM,SAAAC,GACHvB,EAAyBN,EAAU6B,SQVnC+H,EAAOQ,aAEXC,SAAU,SAAAF,GACN,IAAMG,EAA0B,GAYhC,OAXKH,EAAOJ,MAEA,4CAA4CQ,KAAKJ,EAAOJ,SAChEO,EAAOP,MAAQ,yBAFfO,EAAOP,MAAQ,WAKdI,EAAOH,SAEDG,EAAOH,SAAS7J,OAAS,IAChCmK,EAAON,SAAW,4CAFlBM,EAAON,SAAW,WAIfM,KAKf,OAAI/G,EACO,eAAC,KAAD,CAAUmG,GAAI,MAGlB,eAACN,GAAA,EAAD,CAAMC,WAAS,EAACmB,QAAQ,SAAxB,SACH,eAACpB,GAAA,EAAD,CAAMjG,MAAI,EAACsH,GAAI,EAAf,SACI,gBAACC,GAAA,EAAD,WACI,gBAACC,GAAA,EAAD,WACI,0DACI,oBAAGC,IAAI,aAAaC,KAAM,wCACtBC,OAAQ,SADZ,sBAIJ,yEACA,2DACA,mDAEJ,uBAAMZ,SAAUN,EAAOmB,aAAvB,SACI,gBAACC,GAAA,EAAD,WACI,eAAC1F,GAAA,EAAD,yBACIC,MAAM,QACN0F,OAAO,UAEHrB,EAAOsB,cAAc,UAJ7B,IAKIpF,OAAQ8D,EAAOuB,cAGlBvB,EAAOwB,QAAQrB,OAASH,EAAOU,OAAOP,OAAS,sBAAKzB,MAAO,CAAEpC,MAAO,OAArB,SAA+B0D,EAAOU,OAAOP,QAC7F,eAACzE,GAAA,EAAD,yBACI5D,KAAK,WACL6D,MAAM,WACN0F,OAAO,UAEHrB,EAAOsB,cAAc,aAL7B,IAMIpF,OAAQ8D,EAAOuB,cAGlBvB,EAAOwB,QAAQpB,UAAYJ,EAAOU,OAAON,UAAY,sBAAK1B,MAAO,CAAEpC,MAAO,OAArB,SAA+B0D,EAAOU,OAAON,WACnG,eAACqB,GAAA,EAAD,CACI9F,MAAO,cACP+F,QACI,eAAC7D,GAAA,EAAD,eACQmC,EAAOsB,cAAc,kBAGrC,eAACzC,EAAA,EAAD,CAAQ/G,KAAM,SAAUuC,QAAS,YAAaiC,MAAO,UAArD,kCCrEXqF,GAAe1H,IAAMC,MAAK,WAEnC,IAAM3C,EAASiD,aAAiD,SAAAC,GAAK,OAAIA,EAAMC,IAAInD,UAC7EnB,EAAWmE,cACXT,EAAgBU,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,IAAIZ,iBAC1EH,EAAaa,aAAuC,SAAAC,GAAK,OAAIA,EAAMuE,KAAKrF,cAU9E,OAJAsF,qBAAU,WACN7I,GRK6B,SAACA,GAClCsD,IAAa/B,MAAK,SAAAC,GACc,IAAxBA,EAAIvB,KAAKwB,aACTzB,EAASwD,IAAgB,IACzBxD,EAAS2D,IAAe,QAI3B6H,SAAQ,WACLxL,EAAS2D,IAAe,YQb7B,CAAC3D,IAEC0D,EAQD,eAAC,KAAD,UACI,uBAAK8D,UAAU,MAAf,UACI,gBAACiE,EAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,gBAACC,EAAA,EAAD,CAASrD,MAAO,CAAEsD,eAAgB,iBAAlC,UACI,eAAC5F,EAAA,EAAD,CAAY6F,KAAK,QAAQ3F,MAAM,UAAU4F,aAAW,OAApD,SACI,eAAC,IAAD,MAEJ,eAACC,EAAA,EAAD,CAAY9H,QAAQ,KAApB,sBAGCV,GAAc,eAACkF,EAAA,EAAD,CAAQxC,QA1BrB,WAClBjG,GTUsB,SAACA,GAC3BA,EAASK,GAAU,YACnBiD,IACK/B,MAAK,SAAAC,GAC0B,IAAxBA,EAAIvB,KAAKwB,YACTzB,EAASwD,IAAgB,IACzBxD,EAASK,GAAU,cACnBL,EFqDmB,CAAE0B,KAAM,2BEnD3B3B,EAAqBC,EAAUwB,EAAIvB,SAG1C2B,OAAM,SAAAC,GACHvB,EAAyBN,EAAU6B,USEwBqE,MAAM,UAAtC,wBAEP,YAAX/E,GAAwB,eAAC6K,EAAA,EAAD,OAE7B,eAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SAEI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,eAAC1D,GAAD,OACtC,eAAC,KAAD,CAAOyD,KAAM,SAAUC,OAAQ,kBAAM,eAAC1C,GAAD,OACrC,eAAC,KAAD,CAAU2C,KAAM,uBAAwB5C,GAAI,WAMpD,eAACxF,GAAD,SAhCD,sBACHoE,MAAO,CAAEoD,SAAU,QAASa,IAAK,MAAOC,UAAW,SAAUC,MAAO,QADjE,SAEH,eAACC,EAAA,EAAD,S,kBClCNC,GAAcC,aAAgB,CAChC/L,MbsBwB,WAAkF,IAAjFwD,EAAgF,uDAAzD7D,EAAc0I,EAA2C,uCACzG,OAAQA,EAAOxH,MACX,IAAK,eACD,OAAO,2BACA2C,GADP,kBAEK6E,EAAOxJ,WAAa2E,EAAM6E,EAAOxJ,YAAYkI,QAAO,SAAA7G,GAAC,OAAIA,EAAEC,KAAOkI,EAAOlI,QAElF,IAAK,WACD,OAAO,2BAAKqD,GAAZ,kBAAoB6E,EAAOtI,KAAKlB,WAAhC,CAA8CwJ,EAAOtI,MAArD,mBAA8DyD,EAAM6E,EAAOtI,KAAKlB,gBAQpF,IAAK,cACD,OAAO,2BACA2E,GADP,kBAEK6E,EAAOxJ,WAAa2E,EAAM6E,EAAOxJ,YAAYoI,KAAI,SAAA/G,GAAC,OAAIA,EAAEC,KAAOkI,EAAOlI,GAAhB,2BAA0BD,GAAMmI,EAAOpJ,OAAUiB,OAEhH,IAAK,oBACD,OAAO,2BACAsD,GADP,kBAEK6E,EAAOxJ,WAAa2E,EAAM6E,EAAOxJ,YAAYoI,KAAI,SAAA/G,GAAC,OAAIA,EAAEC,KAAOkI,EAAOlI,GAAhB,2BAA0BD,GAA1B,IAA6BvB,MAAO0J,EAAO1J,QAAUuB,OAEpH,KAAKkB,EACD,OAAO,2BACAoC,GADP,kBAEK6E,EAAOhG,SAASlC,GAAK,KAE9B,KAAKgB,EACD,IAAM6K,EAAS,eAAQxI,GAEvB,cADOwI,EAAU3D,EAAOxJ,YACjBmN,EAEX,KAAKzK,EACD,IAAM0K,EAAS,eAAQzI,GAIvB,OAHA6E,EAAO3G,UAAUE,SAAQ,SAAAC,GACrBoK,EAAUpK,EAAG1B,IAAM,MAEhB8L,EAEX,IAAK,YACD,IAAMC,EAAS,eAAQ1I,GAEvB,OADA0I,EAAU7D,EAAOxJ,YAAcwJ,EAAOrI,MAC/BkM,EAEX,IAAK,iCACD,OAAO,2BACA1I,GADP,kBAEK6E,EAAOxJ,WAAa2E,EAAM6E,EAAOxJ,YAAYoI,KAAI,SAAA/G,GAAC,OAAIA,EAAEC,KAAOkI,EAAOlI,GAAhB,2BAA0BD,GAA1B,IAA6B+B,aAAcoG,EAAOpG,eAAiB/B,OAElI,IAAK,wBACD,MAAO,GACX,QACI,OAAOsD,Ia7Ef9B,UZmD2B,WAA8G,IAA7GA,EAA4G,uDAArE/B,EAAc0I,EAAuD,uCACxI,OAAQA,EAAOxH,MACX,KAAKM,EACD,OAAO,YAAIO,GAAWqF,QAAO,SAAAlF,GAAE,OAAIA,EAAG1B,KAAOkI,EAAOxJ,cACxD,KAAKuC,EACD,MAAM,CAAN,2BAAaiH,EAAOhG,UAApB,IAA8B0E,OAAQ,MAAO9E,aAAc,UAA3D,mBAAwEP,IAE5E,KAAKL,EACD,OAAO,YAAIK,GAAWuF,KAAI,SAAApF,GAAE,OAAIA,EAAG1B,KAAOkI,EAAOxJ,WAAjB,2BAAmCgD,GAAnC,IAAuClD,MAAO0J,EAAO1J,QAAUkD,KACnG,KAAKP,EACD,OAAO,YAAII,GAAWuF,KAAI,SAAApF,GAAE,OAAIA,EAAG1B,KAAOkI,EAAOxJ,WAAjB,2BAAmCgD,GAAnC,IAAuCkF,OAAQsB,EAAOtB,SAAWlF,KACrG,KAAKN,EACD,OAAO8G,EAAO3G,UAAUuF,KAAI,SAACpF,GACzB,OAAO,2BAAKA,GAAZ,IAAgBkF,OAAQ,MAAO9E,aAAc,YAErD,KAAKT,EACD,OAAO,YAAIE,GAAWuF,KAAI,SAAApF,GAAE,OAAIA,EAAG1B,KAAOkI,EAAOxJ,WAAjB,2BAAmCgD,GAAnC,IAAuCI,aAAcoG,EAAOpG,eAAiBJ,KACjH,IAAK,wBACD,MAAO,GACX,QACI,OAAOH,IYtEf+B,ITMsB,WAAoF,IAAnFD,EAAkF,uDAAxD7D,GAAc0I,EAA0C,uCACzG,OAAQA,EAAOxH,MACX,IAAK,iBACD,OAAO,2BAAK2C,GAAZ,IAAmBlD,OAAQ+H,EAAO/H,SACtC,IAAK,gBACD,OAAO,2BAAKkD,GAAZ,IAAmBxC,MAAOqH,EAAOrH,QACrC,IAAK,sBACD,OAAO,2BAAKwC,GAAZ,IAAmBX,cAAewF,EAAOxF,gBAC7C,QACI,OAAOW,ISdfuE,KVAuB,WAAoF,IAAnFvE,EAAkF,uDAAxD7D,GAAc0I,EAA0C,uCAC1G,OAAQA,EAAOxH,MACX,IAAK,yBACD,OAAO,2BAAK2C,GAAZ,IAAmBd,WAAY2F,EAAOzF,QAC1C,QACI,OAAOY,MUGN2I,GAAQC,aAAYN,GAAaO,aAAgBC,OAK9DzO,OAAOsO,MAAQA,GChBfI,IAASf,OACL,eAAC,IAAD,CAAUW,MAAOA,GAAjB,SACI,eAACzB,GAAD,MAGJ8B,SAASC,eAAe,SjB8HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlM,MAAK,SAAAmM,GACJA,EAAaC,gBAEd/L,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtB,c","file":"static/js/main.bec99af7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { RequestStatusType } from '../state/app-reducer';\r\n\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldError: Array<string>\r\n    data: T\r\n};\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n};\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n};\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2, \r\n    Urgently = 3,\r\n    Later = 4,\r\n};\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n};\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n};\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n};\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9e8978ae-0246-4c6d-84c4-bc28bfa5ba72'\r\n    }\r\n});\r\n\r\nexport const todolistAPI = {\r\n    getTodos() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{item: TodolistType}>>('todo-lists', { title })\r\n    },\r\n    deleteTodo(todoListId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todoListId}`)\r\n    },\r\n    updateTodolist(todoListId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todoListId}`, { title })\r\n    },\r\n    getTasks(todoListId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`)\r\n    },\r\n    deletTask(taskId: string, todoListId: string ) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todoListId: string, title: string  ) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todoListId}/tasks`, { title });\r\n    },\r\n    updateTask( todoListId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType<TaskType>>(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n    },\r\n};","import { setError, SetErrorAT, setStatus, SetStatusAT } from '../state/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { CommonResponseType } from '../api/todolist-api';\r\n\r\nexport const hendleServerAppError = <T>(dispatch: ErrorUtilsDispatchType, data: CommonResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setError(data.messages[0]))\r\n    } else {\r\n        dispatch(setError('Error'))\r\n    }\r\n    dispatch(setStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (dispatch: ErrorUtilsDispatchType, message: string) => {\r\n    dispatch(setError(message))\r\n    dispatch(setStatus('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetErrorAT | SetStatusAT>","import {\r\n    AddTodoListAT, add_todoList, RemoveTodoListAT, SetTodoListAT,\r\n    remove_todoList, set_todoList, ClearDeletType\r\n} from './TodoList-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType } from '../api/todolist-api';\r\nimport { AppRootStateType } from './store';\r\nimport { setStatus, SetStatusAT, SetErrorAT, RequestStatusType } from './app-reducer';\r\nimport { AxiosError } from 'axios';\r\nimport { handleServerNetworkError, hendleServerAppError } from '../utils/error-utils';\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n};\r\n\r\nexport type ActionUnionType = ReturnType<typeof removeTasksAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof chageTaskTitleAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT\r\n    | SetTodoListAT\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetStatusAT\r\n    | SetErrorAT\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | ClearDeletType\r\n\r\nconst initialState: TaskStateType = {};\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionUnionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASKS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.id)\r\n            }\r\n        case 'ADD-TASK': {\r\n            return { ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]] }\r\n            // const stateCopy = { ...state }\r\n            // const newTask = action.task\r\n            // const tasks = stateCopy[newTask.todoListId]\r\n            // const newTasks = [newTask, ...tasks]\r\n            // stateCopy[newTask.todoListId] = newTasks\r\n            // return stateCopy;\r\n        }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.id ? { ...t, ...action.model } : t)\r\n            }\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.id ? { ...t, title: action.title } : t)\r\n            }\r\n        case add_todoList:\r\n            return {\r\n                ...state,\r\n                [action.todoList.id]: []\r\n            }\r\n        case remove_todoList: {\r\n            const copyTasks = { ...state }\r\n            delete copyTasks[action.todoListId]\r\n            return copyTasks\r\n        }\r\n        case set_todoList: {\r\n            const copyState = { ...state }\r\n            action.todoLists.forEach(tl => {\r\n                copyState[tl.id] = [];\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = { ...state }\r\n            stateCopy[action.todoListId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case 'TASK/CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.id ? { ...t, entityStatus: action.entityStatus } : t)\r\n            }\r\n        case 'TODOLIST/CLEAR-DELETE':\r\n            return {}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTasksAC = (id: string, todoListId: string) =>\r\n    ({ type: 'REMOVE-TASKS', id, todoListId } as const);\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({ type: 'ADD-TASK', task } as const);\r\nexport const updateTaskAC = (todoListId: string, id: string, model: UpdateDomainTaskModelType) =>\r\n    ({ type: 'UPDATE-TASK', todoListId, id, model } as const);\r\nexport const chageTaskTitleAC = (id: string, todoListId: string, title: string) =>\r\n    ({ type: 'CHANGE-TASK-TITLE', id, todoListId, title } as const);\r\nexport const setTasksAC = (tasks: Array<TaskType>, todoListId: string) =>\r\n    ({ type: 'SET-TASKS', tasks, todoListId } as const);\r\n\r\nexport const changeTaskEntityStatusAC = (id: string, todoListId: string, entityStatus: RequestStatusType) =>\r\n    ({ type: 'TASK/CHANGE-TASK-ENTITY-STATUS', id, todoListId, entityStatus } as const)\r\n\r\n// thunk\r\n\r\nexport const fetchTasksTC = (todoListId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatus('loading'))\r\n    todolistAPI.getTasks(todoListId)\r\n        .then((res) => {\r\n            const tasks = res.data.items;\r\n            dispatch(setTasksAC(tasks, todoListId))\r\n            dispatch(setStatus('succeeded'))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n};\r\nexport const removeTaskTC = (taskId: string, todoListId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatus('loading'))\r\n    dispatch(changeTaskEntityStatusAC(taskId, todoListId, 'loading'))\r\n    todolistAPI.deletTask(taskId, todoListId)\r\n        .then((res) => {\r\n            dispatch(removeTasksAC(taskId, todoListId))\r\n            dispatch(setStatus('succeeded'))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n};\r\nexport const addTaskTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setStatus('loading'))\r\n    todolistAPI.createTask(todoListId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setStatus('succeeded'))\r\n            } else {\r\n                hendleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n};\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n};\r\nexport const updateTaskTC = (todoListId: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState();\r\n\r\n        const task = state.tasks[todoListId].find(t => t.id === taskId);\r\n        if (!task) {\r\n            console.warn('task not found in the state');\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel\r\n        }\r\n        dispatch(setStatus('loading'))\r\n        todolistAPI.updateTask(todoListId, taskId, apiModel)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(todoListId, taskId, domainModel))\r\n                    dispatch(setStatus('succeeded'))\r\n                } else {\r\n                    hendleServerAppError(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(dispatch, error.message)\r\n            })\r\n    };\r\n\r\n\r\n\r\n","import { todolistAPI, TodolistType } from './../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\nimport { SetErrorAT, setStatus, SetStatusAT, RequestStatusType } from './app-reducer';\r\nimport { AxiosError } from 'axios';\r\nimport { handleServerNetworkError, hendleServerAppError } from '../utils/error-utils';\r\nimport { fetchTasksTC } from './task-reducer';\r\n\r\nexport const remove_todoList = 'REMOVE-TODOLIST';\r\nexport const add_todoList = 'ADD-TODOLIST';\r\nexport const change_todoList_title = 'CHANGE-TODOLIST-TITLE';\r\nexport const change_todoList_filter = 'CHANGE-TODOLIST-FILTER';\r\nexport const set_todoList = 'SET-TODOLIS';\r\nexport const change_todolist_entity_status = 'TODOLIST/CHANGE-TODOLIST-ENTITY-STATUS';\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: typeof remove_todoList\r\n    todoListId: string\r\n}\r\nexport type AddTodoListAT = {\r\n    type: typeof add_todoList\r\n    todoList: TodolistType\r\n}\r\ntype ChangeTodoListTitleAT = {\r\n    type: typeof change_todoList_title\r\n    todoListId: string\r\n    title: string\r\n}\r\ntype ChangeTodoListFilterAT = {\r\n    type: typeof change_todoList_filter\r\n    todoListId: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodoListAT = {\r\n    type: typeof set_todoList\r\n    todoLists: Array<TodolistType>\r\n}\r\nexport type ClearDeletType = ReturnType<typeof clearDeletAC>\r\n\r\ntype ChangeTodolistEntityStatusAT = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type ActionUnionType = RemoveTodoListAT\r\n    | AddTodoListAT\r\n    | ChangeTodoListTitleAT\r\n    | ChangeTodoListFilterAT\r\n    | SetTodoListAT\r\n    | SetStatusAT\r\n    | SetErrorAT\r\n    | ChangeTodolistEntityStatusAT\r\n    | ClearDeletType\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n};\r\n\r\ntype ThunkDispatch = Dispatch<ActionUnionType>\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListReduser = (todoLists: Array<TodoListDomainType> = initialState, action: ActionUnionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case remove_todoList:\r\n            return [...todoLists].filter(tl => tl.id !== action.todoListId)\r\n        case add_todoList: {\r\n            return [{ ...action.todoList, filter: 'all', entityStatus: 'idle' }, ...todoLists]\r\n        }\r\n        case change_todoList_title:\r\n            return [...todoLists].map(tl => tl.id === action.todoListId ? { ...tl, title: action.title } : tl)\r\n        case change_todoList_filter:\r\n            return [...todoLists].map(tl => tl.id === action.todoListId ? { ...tl, filter: action.filter } : tl)\r\n        case set_todoList:\r\n            return action.todoLists.map((tl) => {\r\n                return { ...tl, filter: 'all', entityStatus: 'idle' }\r\n            })\r\n        case change_todolist_entity_status:\r\n            return [...todoLists].map(tl => tl.id === action.todoListId ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        case 'TODOLIST/CLEAR-DELETE':\r\n            return []\r\n        default:\r\n            return todoLists\r\n    }\r\n};\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListAT => {\r\n    return { type: remove_todoList, todoListId }\r\n};\r\nexport const addTodoListAC = (todoList: TodolistType): AddTodoListAT => {\r\n    return { type: add_todoList, todoList }\r\n};\r\nexport const changeTodoListTitleAC = (todoListId: string, title: string): ChangeTodoListTitleAT => {\r\n    return { type: change_todoList_title, todoListId, title }\r\n};\r\nexport const changeTodoListFilterAC = (todoListId: string, filter: FilterValuesType): ChangeTodoListFilterAT => {\r\n    return { type: change_todoList_filter, todoListId, filter }\r\n};\r\nexport const setTodoListAC = (todoLists: Array<TodolistType>): SetTodoListAT => {\r\n    return { type: set_todoList, todoLists }\r\n};\r\nexport const changeTodolistEntityStatusAC = (todoListId: string, entityStatus: RequestStatusType) =>\r\n    ({ type: change_todolist_entity_status, todoListId, entityStatus } as const)\r\nexport const clearDeletAC = () => ({ type: 'TODOLIST/CLEAR-DELETE' } as const)\r\n\r\nexport const fetchTodoListsTC = () => (dispatch: ThunkDispatch | any) => {\r\n    dispatch(setStatus('loading'))\r\n    todolistAPI.getTodos()\r\n        .then((res) => {\r\n            dispatch(setTodoListAC(res.data))\r\n            dispatch(setStatus('succeeded'))\r\n            return res.data\r\n        })\r\n        .then(todolist => {\r\n            todolist.forEach(tl => {\r\n                dispatch(fetchTasksTC(tl.id))\r\n            })\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n};\r\nexport const removeTodolistsTC = (todoListId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setStatus('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\r\n    todolistAPI.deleteTodo(todoListId)\r\n        .then((res) => {\r\n            dispatch(removeTodoListAC(todoListId))\r\n            dispatch(setStatus('succeeded'))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n};\r\nexport const addTodolistsTC = (title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setStatus('loading'))\r\n    todolistAPI.createTodo(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(setStatus('succeeded'))\r\n            } else {\r\n                hendleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n};\r\nexport const changeTodoListTitleTC = (todoListId: string, title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setStatus('loading'))\r\n    todolistAPI.updateTodolist(todoListId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodoListTitleAC(todoListId, title))\r\n                dispatch(setStatus('succeeded'))\r\n            } else {\r\n                hendleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n};\r\n\r\n","import { CommonResponseType, instance } from \"../../../api/todolist-api\"\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{ userId: number }>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<CommonResponseType<ResponseMeType>>('/auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>('/auth/login')\r\n    },\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { SetStatusAT, SetErrorAT, setStatus } from '../../../state/app-reducer'\r\nimport { clearDeletAC, ClearDeletType } from '../../../state/TodoList-reducer'\r\nimport { handleServerNetworkError, hendleServerAppError } from '../../../utils/error-utils'\r\nimport { authAPI, LoginParamsType } from './login-api'\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return { ...state, isLoggedIn: action.value }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setStatus('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setStatus('succeeded'))\r\n            } else {\r\n                hendleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(dispatch, error)\r\n        })\r\n}\r\n\r\nexport const LogoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setStatus('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setStatus('succeeded'))\r\n                dispatch(clearDeletAC())\r\n            } else {\r\n                hendleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(dispatch, error)\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | SetStatusAT\r\n    | SetErrorAT\r\n    | ClearDeletType\r\n","import { setIsLoggedInAC } from \"../components/features/Login/auth-reducer\";\r\nimport { authAPI } from \"../components/features/Login/login-api\";\r\nimport { Dispatch } from 'redux'\r\n\r\nexport type RequestStatusType = 'loading' | 'idle' | 'succeeded' | 'failed';\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false\r\n};\r\ntype InitialStateType = typeof initialState;\r\n\r\ntype ActionsType = SetStatusAT\r\n    | SetErrorAT\r\n    | SetInitialized\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error }\r\n        case 'APP/SET-INITIALIZED':\r\n            return { ...state, isInitialized: action.isInitialized }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const setStatus = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const);\r\nexport type SetStatusAT = ReturnType<typeof setStatus>\r\n\r\nexport const setError = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const);\r\nexport type SetErrorAT = ReturnType<typeof setError>\r\n\r\nexport const setInitialized = (isInitialized: boolean) => ({ type: 'APP/SET-INITIALIZED', isInitialized } as const);\r\nexport type SetInitialized = ReturnType<typeof setInitialized>\r\n\r\n\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setInitialized(true));\r\n        } else {\r\n        }\r\n    })\r\n        .finally(() => {\r\n            dispatch(setInitialized(true));\r\n        })\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../state/store';\r\nimport { setError } from '../../state/app-reducer';\r\n\r\n\r\nconst Alert = React.memo((props: AlertProps) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n});\r\n\r\nexport const ErrorSnacbar: React.FC = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setError(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar\r\n            open={error !== null}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose}\r\n        >\r\n            <Alert onClose={handleClose} severity='error'>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n});\r\n\r\n\r\n\r\n\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { IconButton } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { RequestStatusType } from '../../state/app-reducer';\r\n\r\nexport type AddItemPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n};\r\n\r\nexport const AddItemFrom: React.FC<AddItemPropsType> = React.memo((props) => {\r\n    const {\r\n        addItem,\r\n        entityStatus,\r\n    } = props;\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState('');\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => { setNewTaskTitle(e.currentTarget.value) };\r\n\r\n    const onKeyPressAddTasks = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        };\r\n        if (e.key === 'Enter') {\r\n            onClickAddTask()\r\n        };\r\n    };\r\n    const onClickAddTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            addItem(newTaskTitle.trim());\r\n            setNewTaskTitle('')\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                variant={'outlined'}\r\n                label={'Type value'}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddTasks}\r\n                error={!!error}\r\n                helperText={error}\r\n                onBlur={() => setError(null)}\r\n                disabled={entityStatus === 'loading'}\r\n            />\r\n            <IconButton\r\n                onClick={onClickAddTask}\r\n                color={'primary'}\r\n                disabled={entityStatus === 'loading'}\r\n            >\r\n                <AddIcon fontSize={'default'} />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n});\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport { RequestStatusType } from '../../state/app-reducer';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (value: string) => void\r\n    entityStatus?: RequestStatusType\r\n\r\n};\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((props) => {\r\n\r\n    const {\r\n        title,\r\n        changeTitle,\r\n        entityStatus,\r\n    } = props;\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n\r\n    const onEditMode = () => setEditMode(true);\r\n    const OffEditMode = () => {\r\n        setEditMode(false);\r\n        changeTitle(newTaskTitle)\r\n        // setNewTaskTitle('') нужно подумать следует ли так делать\r\n    };\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onBlur={OffEditMode}\r\n                autoFocus\r\n                onChange={onChangeTitle}\r\n                disabled={entityStatus === 'loading'}\r\n            /> :\r\n            <span\r\n                onDoubleClick={onEditMode}\r\n            >\r\n                {title}</span>\r\n    )\r\n});","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { Checkbox, IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { EditableSpan } from '../../../EditableSpan/EditableSpan';\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolist-api';\r\nimport { RequestStatusType } from '../../../../state/app-reducer';\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todoListID: string\r\n\r\n    changeTaskStatus: (todoListID: string, id: string, status: TaskStatuses) => void\r\n    removeTasks: (id: string, todoListID: string) => void\r\n    changeTaskTitle: (todoListID: string, id: string, newTitle: string) => void\r\n\r\n    entityStatus: RequestStatusType\r\n};\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo((props) => {\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.todoListID, props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props]);\r\n\r\n    const removeTask = useCallback(() => props.removeTasks(props.task.id, props.todoListID),\r\n        [props]);\r\n    const onChangeTaskTitle = useCallback((newTitle: string) => {\r\n        props.changeTaskTitle(\r\n            props.todoListID,\r\n            props.task.id,\r\n            newTitle,\r\n        )\r\n    }, [props]);\r\n\r\n    return (\r\n        <div\r\n            key={props.task.id}\r\n            className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n        >\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan\r\n                title={props.task.title}\r\n                changeTitle={onChangeTaskTitle}\r\n            />\r\n            <IconButton onClick={removeTask} size=\"small\" disabled={props.entityStatus === 'loading'}>\r\n                <DeleteIcon />\r\n            </IconButton>\r\n\r\n\r\n        </div>\r\n    )\r\n});","import React, { useCallback } from 'react';\r\nimport { AddItemFrom } from '../../AddItemForm/AddItemFrom';\r\nimport { IconButton } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { EditableSpan } from '../../EditableSpan/EditableSpan';\r\nimport { Task } from './Task/Task';\r\nimport { TaskType, TaskStatuses } from '../../../api/todolist-api';\r\nimport { FilterValuesType } from '../../../state/TodoList-reducer';\r\nimport { RequestStatusType } from '../../../state/app-reducer';\r\n\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todoListID: string\r\n\r\n    changeFilter: (todoListID: string, value: FilterValuesType) => void\r\n    addTask: (todoListID: string, title: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (todoListID: string, newTitle: string) => void\r\n\r\n    changeTaskStatus: (todoListID: string, id: string, status: TaskStatuses) => void\r\n    removeTasks: (id: string, todoListID: string) => void\r\n    changeTaskTitle: (todoListID: string, id: string, newTitle: string) => void\r\n\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const TodoList: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const getTasksForTodoList = useCallback(() => {\r\n        switch (props.filter) {\r\n            case 'completed':\r\n                return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n            case 'active':\r\n                return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return props.tasks\r\n        }\r\n    }, [props]);\r\n\r\n    let newTasks = getTasksForTodoList();\r\n\r\n    const tasks = newTasks.map(t => <Task\r\n        task={t}\r\n        todoListID={props.todoListID}\r\n        changeTaskStatus={props.changeTaskStatus}\r\n        removeTasks={props.removeTasks}\r\n        changeTaskTitle={props.changeTaskTitle}\r\n        key={t.id}\r\n        entityStatus={t.entityStatus}\r\n\r\n    />);\r\n\r\n    const onClickAllFilter = useCallback(() => { props.changeFilter(props.todoListID, 'all') }, [props]);\r\n    const onClickActiveFilter = useCallback(() => { props.changeFilter(props.todoListID, 'active') }, [props]);\r\n    const onClickCompletedFilter = useCallback(() => { props.changeFilter(props.todoListID, 'completed') }, [props]);\r\n\r\n    const removeTodoList = useCallback(() => {\r\n        props.removeTodoList(props.todoListID)\r\n    }, [props]);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(props.todoListID, title)\r\n    }, [props]);\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoListID, newTitle)\r\n    }, [props]);\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle} entityStatus={props.entityStatus} />\r\n                <IconButton onClick={removeTodoList} disabled={props.entityStatus === 'loading'}>\r\n                    <DeleteIcon fontSize=\"small\" />\r\n                </IconButton>\r\n            </h3>\r\n            <div>\r\n                <AddItemFrom addItem={addTask} entityStatus={props.entityStatus} />\r\n            </div>\r\n            <ul style={{ listStyle: 'none', paddingLeft: '0px' }}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                    color={'primary'}\r\n                    onClick={onClickAllFilter}>\r\n                    All</Button>\r\n                <Button\r\n                    style={{ marginLeft: \"5px\" }}\r\n                    variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                    color={'primary'}\r\n                    onClick={onClickActiveFilter}\r\n                >Active</Button>\r\n                <Button\r\n                    style={{ marginLeft: \"5px\" }}\r\n                    variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                    color={'primary'}\r\n                    onClick={onClickCompletedFilter}\r\n                >Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TaskStatuses } from '../../../api/todolist-api';\r\nimport { AppRootStateType } from '../../../state/store';\r\nimport {\r\n    removeTaskTC, addTaskTC, TaskStateType,\r\n    updateTaskTC\r\n} from '../../../state/task-reducer';\r\nimport {\r\n    addTodolistsTC, changeTodoListFilterAC, changeTodoListTitleTC,\r\n    fetchTodoListsTC, FilterValuesType, removeTodolistsTC,\r\n    TodoListDomainType\r\n} from '../../../state/TodoList-reducer';\r\nimport { Grid, Paper } from '@material-ui/core';\r\nimport { TodoList } from '../Todolist/TodoList';\r\nimport { AddItemFrom } from '../../AddItemForm/AddItemFrom'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\nexport const TodolistsList: React.FC = React.memo(() => {\r\n\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodoListsTC())\r\n    }, [dispatch, isLoggedIn]);\r\n\r\n    const removeTasks = useCallback((id: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(id, todoListID));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback((todoListID: string, title: string) => {\r\n        dispatch(addTaskTC(todoListID, title));\r\n    }, [dispatch]);\r\n\r\n    const changeStatus = useCallback((todoListID: string, id: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(todoListID, id, { status }))\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback((todoListID: string, id: string, newTitle: string) => {\r\n        dispatch(updateTaskTC(todoListID, id, { title: newTitle }))\r\n    }, [dispatch]);\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        const action = removeTodolistsTC(todoListID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    const changeFilter = useCallback((todoListID: string, value: FilterValuesType) => {\r\n        const action = changeTodoListFilterAC(todoListID, value);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    const changeTodoListTitle = useCallback((todoListID: string, newTitle: string) => {\r\n        dispatch(changeTodoListTitleTC(todoListID, newTitle));\r\n    }, [dispatch]);\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title));\r\n    }, [dispatch]);\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{ padding: '20px' }}>\r\n            <AddItemFrom addItem={addTodoList} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{ padding: '10px' }}>\r\n                            <TodoList\r\n                                todoListID={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTasks={removeTasks}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodoList={removeTodoList}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodoListTitle={changeTodoListTitle}\r\n                                entityStatus={tl.entityStatus}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n})\r\n","import React from 'react';\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from '@material-ui/core';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from './auth-reducer';\r\nimport { AppRootStateType } from '../../../state/store';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login: React.FC<FormikErrorType> = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 2) {\r\n                errors.password = 'More than two characters must be entered';\r\n            }\r\n            return errors\r\n\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a rel='noreferrer' href={'https://social-network.samuraijs.com/'}\r\n                            target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}\r\n\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && <div style={{ color: 'red' }}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n\r\n                            {...formik.getFieldProps('password')}\r\n                            onBlur={formik.handleBlur}\r\n\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{ color: 'red' }}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    {...formik.getFieldProps('rememberMe')}\r\n                                />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Container } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../state/store';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { RequestStatusType } from '../state/app-reducer';\r\nimport { ErrorSnacbar } from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport { TodolistsList } from '../components/features/Todolist/TodolistsList';\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { Login } from './../components/features/Login/Login';\r\nimport { initializeAppTC } from '../state/app-reducer';\r\nimport { LogoutTC } from '../components/features/Login/auth-reducer';\r\n\r\n\r\n\r\nexport const AppWithRedux = React.memo(() => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const dispatch = useDispatch();\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(LogoutTC())\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch]);\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    };\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\">\r\n                    <Toolbar style={{ justifyContent: 'space-between' }}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            TodoList\r\n                        </Typography>\r\n                        {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress />}\r\n                </AppBar>\r\n                <Container fixed>\r\n\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList />} />\r\n                        <Route path={'/login'} render={() => <Login />} />\r\n                        <Redirect from={'/TodoList-attachment'} to={'/'} />\r\n                        {/* <Route path={'/404'} render={() => <h1 style={{ fontSize: '50px', textAlign: 'center' }}>404: PAGE NOT FOUND</h1>} /> */}\r\n                        {/* <Redirect from={'*'} to={'/404'} /> */}\r\n                    </Switch>\r\n\r\n                </Container>\r\n                <ErrorSnacbar />\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n});","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport { tasksReducer } from \"./task-reducer\";\r\nimport { todoListReduser } from \"./TodoList-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport { appReducer } from \"./app-reducer\";\r\nimport { authReducer } from \"../components/features/Login/auth-reducer\";\r\n\r\nconst rootReduser = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListReduser,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n});\r\n\r\n// type AppRootStateType = {\r\n//     todoLists: Array<TodoListType>\r\n//     tasks: TaskStateType\r\n// }\r\n\r\nexport const store = createStore(rootReduser, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReduser>\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport { AppWithRedux } from './app/AppWithRedux';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux />\r\n    </Provider>\r\n    ,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}