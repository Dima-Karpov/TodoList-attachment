{"version":3,"sources":["AddItemFrom.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemFrom","props","useState","newTaskTitle","setNewTaskTitle","error","setError","onClickAddTask","trim","addItem","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","key","helperText","onBlur","IconButton","onClick","color","fontSize","EditableSpan","editMode","setEditMode","changeTitle","autoFocus","onDoubleClick","title","TodoList","tasks","map","t","className","isDone","Checkbox","checked","changeTaskStatus","id","todoListsID","newTitle","changeTaskTitle","removeTasks","size","changeTodoListTitle","removeTodoList","addTask","style","listStyle","paddingLeft","Button","filter","changeFilter","marginLeft","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","todoListID","newTask","changeStatus","getTasksForTodoList","todoList","filterTodoList","tl","todoListComponents","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Typography","Container","container","newTodoListID","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.12107a9b.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { IconButton } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\ntype AddItemPropsType = {\r\n    addItem: (title: string) => void\r\n};\r\n\r\nexport function AddItemFrom(props: AddItemPropsType) {\r\n\r\n    const [newTaskTitle, setNewTaskTitle] = useState('');\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => { setNewTaskTitle(e.currentTarget.value) };\r\n\r\n    const onKeyPressAddTasks = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            onClickAddTask()\r\n        }\r\n    };\r\n    const onClickAddTask = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle.trim());\r\n            setNewTaskTitle('')\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={newTaskTitle}\r\n                variant={'outlined'}\r\n                label={'Type value'}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddTasks}\r\n                error={!!error}\r\n                helperText={error}\r\n                onBlur={() => setError(null)}\r\n            />\r\n            <IconButton onClick={onClickAddTask} color={'primary'} >\r\n                <AddIcon fontSize={'default'} />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n};\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (value: string) => void\r\n\r\n};\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n\r\n    const onEditMode = () => setEditMode(true);\r\n    const OffEditMode = () => {\r\n        setEditMode(false);\r\n        props.changeTitle(newTaskTitle)\r\n        // setNewTaskTitle('') нужно подумать следует ли так делать\r\n    };\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                value={newTaskTitle}\r\n                onBlur={OffEditMode}\r\n                autoFocus\r\n                onChange={onChangeTitle}\r\n            /> :\r\n            <span\r\n                onDoubleClick={onEditMode}\r\n            >\r\n                {props.title}</span>\r\n    )\r\n};","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport { AddItemFrom } from './AddItemFrom';\r\nimport { FilterValueTpe } from './App';\r\nimport { EditableSpan } from './EditableSpan';\r\nimport { Checkbox, IconButton } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValueTpe\r\n    todoListsID: string\r\n\r\n    removeTasks: (id: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValueTpe, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (todoListID: string, newTitle: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n    const tasks = props.tasks.map(t => {\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(t.id,\r\n                e.currentTarget.checked,\r\n                props.todoListsID)\r\n        };\r\n        const removeTask = () => props.removeTasks(t.id, props.todoListsID);\r\n        \r\n        const onChangeTaskTitle = (newTitle: string) => {\r\n            props.changeTaskTitle(\r\n                t.id,\r\n                newTitle,\r\n                props.todoListsID\r\n            )\r\n        };\r\n\r\n        return (\r\n            <li\r\n                key={t.id}\r\n                className={t.isDone ? 'is-done' : ''}\r\n            >\r\n                <Checkbox\r\n                    checked={t.isDone}\r\n                    onChange={onChangeHandler}\r\n                />\r\n\r\n                <EditableSpan\r\n                    title={t.title}\r\n                    changeTitle={onChangeTaskTitle}\r\n                />\r\n                {/* <button onClick={removeTask}>del</button> */}\r\n                <IconButton onClick={removeTask} size=\"small\" >\r\n                    <DeleteIcon  />\r\n                </IconButton>\r\n \r\n \r\n            </li>\r\n        )\r\n    });\r\n\r\n    const onClickAllFilter = () => { props.changeFilter('all', props.todoListsID) };\r\n    const onClickActiveFilter = () => { props.changeFilter('active', props.todoListsID) };\r\n    const onClickCompletedFilter = () => { props.changeFilter('completed', props.todoListsID) };\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.todoListsID)\r\n    };\r\n    const addTask = (title:string) => {\r\n        props.addTask(title, props.todoListsID)\r\n    };\r\n\r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoListsID, newTitle)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n            <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList}>\r\n                    <DeleteIcon fontSize=\"small\" />\r\n                </IconButton>\r\n            </h3>\r\n            <div>\r\n                <AddItemFrom addItem={addTask} />\r\n            </div>\r\n            <ul style={{listStyle: 'none', paddingLeft:'0px'}}>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    variant={props.filter === 'all' ? 'contained' : 'text'}\r\n                    color={'primary'}\r\n                    onClick={onClickAllFilter}>\r\n                    All</Button>\r\n                <Button\r\n                    style={{ marginLeft: \"5px\"}}\r\n                    variant={props.filter === 'active' ? 'contained' : 'text'}\r\n                    color={'primary'}\r\n                    onClick={onClickActiveFilter}\r\n                    >Active</Button>\r\n                <Button\r\n                    style={{ marginLeft: \"5px\" }}\r\n                    variant={props.filter === 'completed' ? 'contained' : 'text'}\r\n                    color={'primary'}\r\n                    onClick={onClickCompletedFilter}\r\n                    >Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport { AddItemFrom } from './AddItemFrom';\r\nimport './App.css';\r\nimport { TaskType, TodoList } from './TodoList';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Container, Grid, Paper } from '@material-ui/core';\r\n\r\n\r\nexport type FilterValueTpe = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueTpe\r\n};\r\ntype TaskStateType = {\r\n    [key: string]: TaskType[]\r\n};\r\n\r\nfunction App() {\r\n\r\n    const todoListID_1 = v1();\r\n    const todoListID_2 = v1();\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>(\r\n        [\r\n            {\r\n                id: todoListID_1,\r\n                title: 'What to learn',\r\n                filter: 'all'\r\n            },\r\n            {\r\n                id: todoListID_2,\r\n                title: 'What to buy',\r\n                filter: 'all'\r\n            },\r\n        ]\r\n    );\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>(\r\n        {\r\n            [todoListID_1]: [\r\n                { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n                { id: v1(), title: \"JS\", isDone: true },\r\n                { id: v1(), title: \"ReactJS\", isDone: false },\r\n                { id: v1(), title: \"Redax\", isDone: true },\r\n            ],\r\n            [todoListID_2]: [\r\n                { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n                { id: v1(), title: \"JS\", isDone: true },\r\n                { id: v1(), title: \"ReactJS\", isDone: false },\r\n                { id: v1(), title: \"Redax\", isDone: false },\r\n            ]\r\n        }\r\n    );\r\n\r\n    function removeTasks(id: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== id);\r\n        setTasks({ ...tasks })\r\n    };\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false\r\n        }\r\n        setTasks({ ...tasks, [todoListID]: [newTask, ...tasks[todoListID]] });\r\n    };\r\n\r\n    function changeStatus(id: string, isDone: boolean, todoListID: string) {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t => t.id === id ? { ...t, isDone: isDone } : t)\r\n        });\r\n    };\r\n    function changeTaskTitle(id: string, newTitle: string, todoListID: string) {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t => t.id === id ? { ...t, title: newTitle } : t)\r\n        });\r\n    };\r\n\r\n    function getTasksForTodoList(todoList: TodoListType) {\r\n        switch (todoList.filter) {\r\n            case 'completed':\r\n                return tasks[todoList.id].filter(t => t.isDone)\r\n            case 'active':\r\n                return tasks[todoList.id].filter(t => t.isDone === false)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    };\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        let filterTodoList = todoLists.filter(tl => tl.id !== todoListID)\r\n        setTodoLists(filterTodoList);\r\n        delete tasks[todoListID];\r\n        setTasks({ ...tasks });\r\n    };\r\n    function changeFilter(value: FilterValueTpe, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? { ...tl, filter: value } : tl));\r\n    };\r\n    function changeTodoListTitle(todoListID: string, newTitle: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID ? { ...tl, title: newTitle } : tl));\r\n    };\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1();\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: 'all'\r\n        };\r\n        setTodoLists([...todoLists, newTodoList]);\r\n        setTasks({ ...tasks, [newTodoListID]: [] });\r\n    };\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={3} style={{padding: '10px'}}>\r\n                    <TodoList\r\n                        todoListsID={tl.id}\r\n                        title={tl.title}\r\n                        tasks={getTasksForTodoList(tl)}\r\n                        removeTasks={removeTasks}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={tl.filter}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent:'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container style={{padding: '20px 0px'}}>\r\n                    <AddItemFrom addItem={addTodoList} />\r\n                </Grid>\r\n                <Grid container spacing={7}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}